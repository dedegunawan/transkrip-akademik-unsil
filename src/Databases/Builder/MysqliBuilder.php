<?php
/**
 * Created by PhpStorm.
 * User: tik_squad
 * Date: 21/10/19
 * Time: 13.37
 */

namespace DedeGunawan\TranskripAkademikUnsil\Databases\Builder;


use DedeGunawan\TranskripAkademikUnsil\Exceptions\MysqliConnectionError;

class MysqliBuilder extends BaseDatabaseBuilder
{
    /**
     * @var $connection \mysqli
     */
    protected $connection;
    protected $host;
    protected $username;
    protected $passwd;
    protected $dbname;
    protected $port;
    protected $socket;

    /**
     * @return mixed
     */
    public function getHost()
    {
        return $this->host;
    }

    /**
     * @param mixed $host
     */
    public function setHost($host)
    {
        $this->host = $host;
    }

    /**
     * @return mixed
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * @param mixed $username
     */
    public function setUsername($username)
    {
        $this->username = $username;
    }

    /**
     * @return mixed
     */
    public function getPasswd()
    {
        return $this->passwd;
    }

    /**
     * @param mixed $passwd
     */
    public function setPasswd($passwd)
    {
        $this->passwd = $passwd;
    }

    /**
     * @return mixed
     */
    public function getDbname()
    {
        return $this->dbname;
    }

    /**
     * @param mixed $dbname
     */
    public function setDbname($dbname)
    {
        $this->dbname = $dbname;
    }

    /**
     * @return mixed
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * @param mixed $port
     */
    public function setPort($port)
    {
        $this->port = $port;
    }

    /**
     * @return mixed
     */
    public function getSocket()
    {
        return $this->socket;
    }

    /**
     * @param mixed $socket
     */
    public function setSocket($socket)
    {
        $this->socket = $socket;
    }

    /**
     * @return \mysqli
     */
    public function getConnection()
    {
        return parent::getConnection(); // TODO: Change the autogenerated stub
    }


    function connect($reconnect=false)
    {
        if ($reconnect || !$this->connection) {
            try {
                mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
                $mysqli = new \mysqli(
                    $this->getHost()??'127.0.0.1',
                    $this->getUsername()??'root',
                    $this->getPasswd()??'',
                    $this->getDbname()??null,
                    $this->getPort()??'3306',
                    $this->getSocket()??null
                );
                $this->connection = $mysqli;
            } catch (\Exception $exception) {
                $this->setErrorMessage($exception->getMessage());
                throw new MysqliConnectionError($exception->getMessage());
            }
        }
        return $this->connection;
    }

    function disconnect()
    {
        return $this->connection->close();
    }

    public function __call($name, $arguments)
    {
        $reflection = new \ReflectionClass(get_called_class());
        if ($reflection->hasMethod($name)) return call_user_func_array(array($this, $name), $arguments);

        if ($this->connection) {
            $mysqli_reflection = new \ReflectionClass($this->connection);
            if ($mysqli_reflection->hasMethod($name))
                return call_user_func_array(array($this->connection, $name), $arguments);
        }

        return null;
    }



    public function numRows($query)
    {

        if ($query instanceof \mysqli_result) return $query->num_rows;
        if (!$this->getConnection()->query($query)) return 0;
        return $this->getConnection()->query($query)->num_rows;
    }

    public function select($query, $one=false)
    {

        if ($one) return $this->getConnection()->query($query)->fetch_array(MYSQLI_ASSOC);

        $datas = array();
        $query = $this->getConnection()->query($query);
        if (!$query) return $datas;
        while ($result = $query->fetch_array(MYSQLI_ASSOC)) $datas[] = $result;
        return $datas;
    }

    public function selectOne($query)
    {
        return $this->select($query, true);
    }

    public function selectField($query, $field='')
    {
        $result = $this->selectOne($query);
        if (!$field) $field = @array_keys($result)[0];
        return $result[$field];
    }
    public function selectAll($query)
    {
        return $this->select($query, false);
    }

}